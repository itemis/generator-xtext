dependencies {
    <% if (testingEnabled) { %>
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.eclipse.xtext:org.eclipse.xtext.testing:${xtextVersion}"
    testImplementation "org.eclipse.xtext:org.eclipse.xtext.xbase.testing:${xtextVersion}"
    <% } %>
    api "org.eclipse.xtext:org.eclipse.xtext:${xtextVersion}"
    api "org.eclipse.xtext:org.eclipse.xtext.xbase:${xtextVersion}"
}
configurations {
    mwe2 {
        extendsFrom compileClasspath
    }
}

dependencies {
    mwe2 "org.eclipse.emf:org.eclipse.emf.mwe2.launch"
    mwe2 "org.eclipse.xtext:org.eclipse.xtext.common.types:${xtextVersion}"
    mwe2 "org.eclipse.xtext:org.eclipse.xtext.xtext.generator:${xtextVersion}"
    mwe2 "org.eclipse.xtext:xtext-antlr-generator"
}

task generateXtextLanguage(type: JavaExec) {
    mainClass = 'org.eclipse.emf.mwe2.launch.runtime.Mwe2Launcher'
    classpath = configurations.mwe2
    inputs.file "<%= workflowFile %>"
    inputs.file "<%= grammarFile %>"
    outputs.dir "src/main/xtext-gen"
    args += "<%= workflowFile %>"
    args += "-p"
    args += "rootPath=/${projectDir}/.."
}

<% if (testingEnabled) { %>
test {
	useJUnitPlatform()
}
<% } %>
processResources.dependsOn(generateXtextLanguage)
generateXtext.dependsOn(generateXtextLanguage)
clean.dependsOn(cleanGenerateXtextLanguage)
eclipse.classpath.plusConfigurations += [configurations.mwe2]
